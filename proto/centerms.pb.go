// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: centerms.proto

package proto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Event is used for NATS Publish-Subscribe
type Event struct {
	AggregateId   string `protobuf:"bytes,1,opt,name=aggregate_id,json=aggregateId,proto3" json:"aggregate_id,omitempty"`
	AggregateType string `protobuf:"bytes,2,opt,name=aggregate_type,json=aggregateType,proto3" json:"aggregate_type,omitempty"`
	EventId       string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventType     string `protobuf:"bytes,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	EventData     string `protobuf:"bytes,5,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_centerms_9b560189adaa16df, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetAggregateId() string {
	if m != nil {
		return m.AggregateId
	}
	return ""
}

func (m *Event) GetAggregateType() string {
	if m != nil {
		return m.AggregateType
	}
	return ""
}

func (m *Event) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *Event) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *Event) GetEventData() string {
	if m != nil {
		return m.EventData
	}
	return ""
}

type DevMeta struct {
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mac  string `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (m *DevMeta) Reset()         { *m = DevMeta{} }
func (m *DevMeta) String() string { return proto.CompactTextString(m) }
func (*DevMeta) ProtoMessage()    {}
func (*DevMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_centerms_9b560189adaa16df, []int{1}
}
func (m *DevMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DevMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevMeta.Merge(dst, src)
}
func (m *DevMeta) XXX_Size() int {
	return m.Size()
}
func (m *DevMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_DevMeta.DiscardUnknown(m)
}

var xxx_messageInfo_DevMeta proto.InternalMessageInfo

func (m *DevMeta) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DevMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DevMeta) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type SetDevInitCfgRequest struct {
	Time int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Meta *DevMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
}

func (m *SetDevInitCfgRequest) Reset()         { *m = SetDevInitCfgRequest{} }
func (m *SetDevInitCfgRequest) String() string { return proto.CompactTextString(m) }
func (*SetDevInitCfgRequest) ProtoMessage()    {}
func (*SetDevInitCfgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_centerms_9b560189adaa16df, []int{2}
}
func (m *SetDevInitCfgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDevInitCfgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDevInitCfgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetDevInitCfgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDevInitCfgRequest.Merge(dst, src)
}
func (m *SetDevInitCfgRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetDevInitCfgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDevInitCfgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDevInitCfgRequest proto.InternalMessageInfo

func (m *SetDevInitCfgRequest) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SetDevInitCfgRequest) GetMeta() *DevMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type SetDevInitCfgResponse struct {
	Cfg []byte `protobuf:"bytes,1,opt,name=cfg,proto3" json:"cfg,omitempty"`
}

func (m *SetDevInitCfgResponse) Reset()         { *m = SetDevInitCfgResponse{} }
func (m *SetDevInitCfgResponse) String() string { return proto.CompactTextString(m) }
func (*SetDevInitCfgResponse) ProtoMessage()    {}
func (*SetDevInitCfgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_centerms_9b560189adaa16df, []int{3}
}
func (m *SetDevInitCfgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDevInitCfgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDevInitCfgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetDevInitCfgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDevInitCfgResponse.Merge(dst, src)
}
func (m *SetDevInitCfgResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetDevInitCfgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDevInitCfgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetDevInitCfgResponse proto.InternalMessageInfo

func (m *SetDevInitCfgResponse) GetCfg() []byte {
	if m != nil {
		return m.Cfg
	}
	return nil
}

type SaveDevDataRequest struct {
	Time int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Meta *DevMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	Data []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SaveDevDataRequest) Reset()         { *m = SaveDevDataRequest{} }
func (m *SaveDevDataRequest) String() string { return proto.CompactTextString(m) }
func (*SaveDevDataRequest) ProtoMessage()    {}
func (*SaveDevDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_centerms_9b560189adaa16df, []int{4}
}
func (m *SaveDevDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveDevDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveDevDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SaveDevDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveDevDataRequest.Merge(dst, src)
}
func (m *SaveDevDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *SaveDevDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveDevDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveDevDataRequest proto.InternalMessageInfo

func (m *SaveDevDataRequest) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SaveDevDataRequest) GetMeta() *DevMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SaveDevDataRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SaveDevDataResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *SaveDevDataResponse) Reset()         { *m = SaveDevDataResponse{} }
func (m *SaveDevDataResponse) String() string { return proto.CompactTextString(m) }
func (*SaveDevDataResponse) ProtoMessage()    {}
func (*SaveDevDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_centerms_9b560189adaa16df, []int{5}
}
func (m *SaveDevDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveDevDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveDevDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SaveDevDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveDevDataResponse.Merge(dst, src)
}
func (m *SaveDevDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *SaveDevDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveDevDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveDevDataResponse proto.InternalMessageInfo

func (m *SaveDevDataResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "proto.Event")
	proto.RegisterType((*DevMeta)(nil), "proto.DevMeta")
	proto.RegisterType((*SetDevInitCfgRequest)(nil), "proto.SetDevInitCfgRequest")
	proto.RegisterType((*SetDevInitCfgResponse)(nil), "proto.SetDevInitCfgResponse")
	proto.RegisterType((*SaveDevDataRequest)(nil), "proto.SaveDevDataRequest")
	proto.RegisterType((*SaveDevDataResponse)(nil), "proto.SaveDevDataResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CenterServiceClient is the client API for CenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CenterServiceClient interface {
	SetDevInitCfg(ctx context.Context, in *SetDevInitCfgRequest, opts ...grpc.CallOption) (*SetDevInitCfgResponse, error)
	SaveDevData(ctx context.Context, in *SaveDevDataRequest, opts ...grpc.CallOption) (*SaveDevDataResponse, error)
}

type centerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCenterServiceClient(cc *grpc.ClientConn) CenterServiceClient {
	return &centerServiceClient{cc}
}

func (c *centerServiceClient) SetDevInitCfg(ctx context.Context, in *SetDevInitCfgRequest, opts ...grpc.CallOption) (*SetDevInitCfgResponse, error) {
	out := new(SetDevInitCfgResponse)
	err := c.cc.Invoke(ctx, "/proto.CenterService/SetDevInitCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerServiceClient) SaveDevData(ctx context.Context, in *SaveDevDataRequest, opts ...grpc.CallOption) (*SaveDevDataResponse, error) {
	out := new(SaveDevDataResponse)
	err := c.cc.Invoke(ctx, "/proto.CenterService/SaveDevData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterServiceServer is the server API for CenterService service.
type CenterServiceServer interface {
	SetDevInitCfg(context.Context, *SetDevInitCfgRequest) (*SetDevInitCfgResponse, error)
	SaveDevData(context.Context, *SaveDevDataRequest) (*SaveDevDataResponse, error)
}

func RegisterCenterServiceServer(s *grpc.Server, srv CenterServiceServer) {
	s.RegisterService(&_CenterService_serviceDesc, srv)
}

func _CenterService_SetDevInitCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDevInitCfgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServiceServer).SetDevInitCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CenterService/SetDevInitCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServiceServer).SetDevInitCfg(ctx, req.(*SetDevInitCfgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterService_SaveDevData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDevDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServiceServer).SaveDevData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CenterService/SaveDevData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServiceServer).SaveDevData(ctx, req.(*SaveDevDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CenterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CenterService",
	HandlerType: (*CenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDevInitCfg",
			Handler:    _CenterService_SetDevInitCfg_Handler,
		},
		{
			MethodName: "SaveDevData",
			Handler:    _CenterService_SaveDevData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "centerms.proto",
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AggregateId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.AggregateId)))
		i += copy(dAtA[i:], m.AggregateId)
	}
	if len(m.AggregateType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.AggregateType)))
		i += copy(dAtA[i:], m.AggregateType)
	}
	if len(m.EventId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if len(m.EventType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.EventType)))
		i += copy(dAtA[i:], m.EventType)
	}
	if len(m.EventData) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.EventData)))
		i += copy(dAtA[i:], m.EventData)
	}
	return i, nil
}

func (m *DevMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Mac) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.Mac)))
		i += copy(dAtA[i:], m.Mac)
	}
	return i, nil
}

func (m *SetDevInitCfgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDevInitCfgRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(m.Time))
	}
	if m.Meta != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SetDevInitCfgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDevInitCfgResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cfg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.Cfg)))
		i += copy(dAtA[i:], m.Cfg)
	}
	return i, nil
}

func (m *SaveDevDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveDevDataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(m.Time))
	}
	if m.Meta != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(m.Meta.Size()))
		n2, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *SaveDevDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveDevDataResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	return i, nil
}

func encodeVarintCenterms(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AggregateId)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.AggregateType)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.EventData)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	return n
}

func (m *DevMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.Mac)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	return n
}

func (m *SetDevInitCfgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovCenterms(uint64(m.Time))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCenterms(uint64(l))
	}
	return n
}

func (m *SetDevInitCfgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cfg)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	return n
}

func (m *SaveDevDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovCenterms(uint64(m.Time))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	return n
}

func (m *SaveDevDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	return n
}

func sovCenterms(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCenterms(x uint64) (n int) {
	return sovCenterms(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenterms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenterms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenterms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenterms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDevInitCfgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenterms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDevInitCfgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDevInitCfgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &DevMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenterms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDevInitCfgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenterms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDevInitCfgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDevInitCfgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cfg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cfg = append(m.Cfg[:0], dAtA[iNdEx:postIndex]...)
			if m.Cfg == nil {
				m.Cfg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenterms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveDevDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenterms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveDevDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveDevDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &DevMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenterms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveDevDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenterms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveDevDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveDevDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenterms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCenterms(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCenterms
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCenterms
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCenterms
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCenterms(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCenterms = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCenterms   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("centerms.proto", fileDescriptor_centerms_9b560189adaa16df) }

var fileDescriptor_centerms_9b560189adaa16df = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xbb, 0x4e, 0xe3, 0x50,
	0x10, 0xb5, 0xd7, 0x79, 0x6c, 0x26, 0x0f, 0xad, 0xee, 0xee, 0x22, 0x27, 0x80, 0x05, 0x57, 0x42,
	0x82, 0x82, 0x14, 0xe1, 0x0f, 0x88, 0x41, 0x8a, 0x04, 0x14, 0x0e, 0x3d, 0x5c, 0xec, 0x89, 0xe5,
	0xc2, 0x8e, 0xb1, 0x6f, 0x2c, 0xe5, 0x2f, 0xf8, 0x09, 0x1a, 0xbe, 0x84, 0x32, 0x25, 0x25, 0x4a,
	0x7e, 0x04, 0xdd, 0xb1, 0x13, 0x12, 0x48, 0x47, 0xe5, 0x73, 0xe7, 0xcc, 0x9c, 0x73, 0x66, 0x64,
	0x68, 0xb9, 0x18, 0x49, 0x4c, 0xc2, 0xb4, 0x1b, 0x27, 0x63, 0x39, 0x66, 0x65, 0xfa, 0xf0, 0x17,
	0x1d, 0xca, 0x17, 0x19, 0x46, 0x92, 0x1d, 0x42, 0x43, 0xf8, 0x7e, 0x82, 0xbe, 0x90, 0x78, 0x17,
	0x78, 0xa6, 0x7e, 0xa0, 0x1f, 0xd7, 0x9c, 0xfa, 0xaa, 0x36, 0xf0, 0xd8, 0x11, 0xb4, 0x3e, 0x5b,
	0xe4, 0x34, 0x46, 0xf3, 0x17, 0x35, 0x35, 0x57, 0xd5, 0xdb, 0x69, 0x8c, 0xac, 0x0d, 0xbf, 0x51,
	0x49, 0x2a, 0x15, 0x83, 0x1a, 0xaa, 0xf4, 0x1e, 0x78, 0x6c, 0x1f, 0x20, 0xa7, 0x68, 0xba, 0x44,
	0x64, 0x8d, 0x2a, 0x34, 0xb9, 0xa2, 0x3d, 0x21, 0x85, 0x59, 0x5e, 0xa3, 0x6d, 0x21, 0x05, 0xef,
	0x43, 0xd5, 0xc6, 0xec, 0x1a, 0xa5, 0x60, 0x0c, 0x4a, 0x24, 0x91, 0xa7, 0x24, 0xac, 0x6a, 0x91,
	0x08, 0x97, 0xa1, 0x08, 0xb3, 0x3f, 0x60, 0x84, 0xc2, 0x2d, 0x62, 0x28, 0xc8, 0x6f, 0xe0, 0xdf,
	0x10, 0xa5, 0x8d, 0xd9, 0x20, 0x0a, 0x64, 0x7f, 0xe4, 0x3b, 0xf8, 0x38, 0xc1, 0x54, 0x92, 0x62,
	0x10, 0xe6, 0x8a, 0x86, 0x43, 0x98, 0x71, 0x28, 0x85, 0x28, 0x05, 0x29, 0xd6, 0x7b, 0xad, 0xfc,
	0x74, 0xdd, 0x22, 0x83, 0x43, 0x1c, 0x3f, 0x81, 0xff, 0x5f, 0xf4, 0xd2, 0x78, 0x1c, 0xa5, 0x64,
	0xed, 0x8e, 0x7c, 0xd2, 0x6b, 0x38, 0x0a, 0xf2, 0x7b, 0x60, 0x43, 0x91, 0xa1, 0x8d, 0x99, 0x5a,
	0xe7, 0x87, 0xc6, 0x6a, 0x8e, 0xce, 0x64, 0x90, 0x01, 0x61, 0x7e, 0x0a, 0x7f, 0x37, 0x1c, 0x8a,
	0x28, 0x3b, 0x50, 0x49, 0xa5, 0x90, 0x93, 0xb4, 0xb8, 0x57, 0xf1, 0xea, 0x3d, 0xeb, 0xd0, 0xec,
	0xd3, 0x7f, 0x31, 0xc4, 0x24, 0x0b, 0x5c, 0x64, 0x57, 0xd0, 0xdc, 0xd8, 0x86, 0xed, 0x16, 0xde,
	0xdb, 0x6e, 0xd6, 0xd9, 0xdb, 0x4e, 0xe6, 0xae, 0x5c, 0x63, 0x97, 0x50, 0x5f, 0x8b, 0xc3, 0xda,
	0xcb, 0xf6, 0x6f, 0x47, 0xe8, 0x74, 0xb6, 0x51, 0x4b, 0x9d, 0x73, 0xf3, 0x75, 0x6e, 0xe9, 0xb3,
	0xb9, 0xa5, 0xbf, 0xcf, 0x2d, 0xfd, 0x69, 0x61, 0x69, 0xb3, 0x85, 0xa5, 0xbd, 0x2d, 0x2c, 0xed,
	0xa1, 0x42, 0x63, 0x67, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x70, 0xbf, 0xcc, 0xff, 0xdf, 0x02,
	0x00, 0x00,
}
