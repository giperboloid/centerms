// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: centerms.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_UNDEFINED Status = 0
	Status_OK        Status = 1
	Status_FAILED    Status = 2
)

var Status_name = map[int32]string{
	0: "UNDEFINED",
	1: "OK",
	2: "FAILED",
}

var Status_value = map[string]int32{
	"UNDEFINED": 0,
	"OK":        1,
	"FAILED":    2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c71d6ed29467879, []int{0}
}

// Event is used for NATS pub/sub.
type Event struct {
	AggregateId   string `protobuf:"bytes,1,opt,name=aggregate_id,json=aggregateId,proto3" json:"aggregate_id,omitempty"`
	AggregateType string `protobuf:"bytes,2,opt,name=aggregate_type,json=aggregateType,proto3" json:"aggregate_type,omitempty"`
	EventId       string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventType     string `protobuf:"bytes,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	EventData     string `protobuf:"bytes,5,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c71d6ed29467879, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetAggregateId() string {
	if m != nil {
		return m.AggregateId
	}
	return ""
}

func (m *Event) GetAggregateType() string {
	if m != nil {
		return m.AggregateType
	}
	return ""
}

func (m *Event) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *Event) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *Event) GetEventData() string {
	if m != nil {
		return m.EventData
	}
	return ""
}

type GetInitCfgRequest struct {
	Time  int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	DevId string `protobuf:"bytes,2,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *GetInitCfgRequest) Reset()         { *m = GetInitCfgRequest{} }
func (m *GetInitCfgRequest) String() string { return proto.CompactTextString(m) }
func (*GetInitCfgRequest) ProtoMessage()    {}
func (*GetInitCfgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c71d6ed29467879, []int{1}
}
func (m *GetInitCfgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInitCfgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInitCfgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInitCfgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInitCfgRequest.Merge(m, src)
}
func (m *GetInitCfgRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInitCfgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInitCfgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInitCfgRequest proto.InternalMessageInfo

func (m *GetInitCfgRequest) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GetInitCfgRequest) GetDevId() string {
	if m != nil {
		return m.DevId
	}
	return ""
}

func (m *GetInitCfgRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type GetInitCfgResponse struct {
	Cfg []byte `protobuf:"bytes,1,opt,name=cfg,proto3" json:"cfg,omitempty"`
}

func (m *GetInitCfgResponse) Reset()         { *m = GetInitCfgResponse{} }
func (m *GetInitCfgResponse) String() string { return proto.CompactTextString(m) }
func (*GetInitCfgResponse) ProtoMessage()    {}
func (*GetInitCfgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c71d6ed29467879, []int{2}
}
func (m *GetInitCfgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInitCfgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInitCfgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInitCfgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInitCfgResponse.Merge(m, src)
}
func (m *GetInitCfgResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetInitCfgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInitCfgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInitCfgResponse proto.InternalMessageInfo

func (m *GetInitCfgResponse) GetCfg() []byte {
	if m != nil {
		return m.Cfg
	}
	return nil
}

type SaveDataRequest struct {
	Time  int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	DevId string `protobuf:"bytes,2,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Data  []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SaveDataRequest) Reset()         { *m = SaveDataRequest{} }
func (m *SaveDataRequest) String() string { return proto.CompactTextString(m) }
func (*SaveDataRequest) ProtoMessage()    {}
func (*SaveDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c71d6ed29467879, []int{3}
}
func (m *SaveDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveDataRequest.Merge(m, src)
}
func (m *SaveDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *SaveDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveDataRequest proto.InternalMessageInfo

func (m *SaveDataRequest) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SaveDataRequest) GetDevId() string {
	if m != nil {
		return m.DevId
	}
	return ""
}

func (m *SaveDataRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SaveDataRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SaveDataResponse struct {
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
}

func (m *SaveDataResponse) Reset()         { *m = SaveDataResponse{} }
func (m *SaveDataResponse) String() string { return proto.CompactTextString(m) }
func (*SaveDataResponse) ProtoMessage()    {}
func (*SaveDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c71d6ed29467879, []int{4}
}
func (m *SaveDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveDataResponse.Merge(m, src)
}
func (m *SaveDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *SaveDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveDataResponse proto.InternalMessageInfo

func (m *SaveDataResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNDEFINED
}

func init() {
	proto.RegisterEnum("proto.Status", Status_name, Status_value)
	proto.RegisterType((*Event)(nil), "proto.Event")
	proto.RegisterType((*GetInitCfgRequest)(nil), "proto.GetInitCfgRequest")
	proto.RegisterType((*GetInitCfgResponse)(nil), "proto.GetInitCfgResponse")
	proto.RegisterType((*SaveDataRequest)(nil), "proto.SaveDataRequest")
	proto.RegisterType((*SaveDataResponse)(nil), "proto.SaveDataResponse")
}

func init() { proto.RegisterFile("centerms.proto", fileDescriptor_9c71d6ed29467879) }

var fileDescriptor_9c71d6ed29467879 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x4b, 0x6f, 0xd3, 0x50,
	0x10, 0x85, 0x7d, 0xf3, 0x70, 0x9b, 0xa1, 0x09, 0xe1, 0x2e, 0xc0, 0x44, 0xc2, 0x2d, 0x96, 0x90,
	0x78, 0x28, 0x8e, 0x54, 0x24, 0x76, 0x2c, 0xc8, 0xa3, 0xc8, 0x02, 0x15, 0x29, 0x01, 0x89, 0x1d,
	0xba, 0x8d, 0xa7, 0xc6, 0x40, 0x62, 0x63, 0x4f, 0x5c, 0x75, 0xcf, 0x82, 0x25, 0x12, 0x7f, 0x8a,
	0x65, 0xc5, 0x8a, 0x5d, 0x91, 0xf3, 0x47, 0x90, 0xc7, 0x89, 0x83, 0xd5, 0x6c, 0xbb, 0x4a, 0x74,
	0xce, 0x99, 0x99, 0x6f, 0xc6, 0x17, 0x5a, 0x53, 0x9c, 0x13, 0x46, 0xb3, 0xd8, 0x0e, 0xa3, 0x80,
	0x02, 0x59, 0xe7, 0x9f, 0xce, 0x33, 0xcf, 0xa7, 0x8f, 0x8b, 0x13, 0x7b, 0x1a, 0xcc, 0x7a, 0xb3,
	0x33, 0x9f, 0x3e, 0x07, 0x67, 0x3d, 0x2f, 0xe8, 0xb2, 0xd9, 0x4d, 0xd4, 0x17, 0xdf, 0x55, 0x14,
	0x44, 0x71, 0xaf, 0xf8, 0x9b, 0x97, 0x5b, 0xbf, 0x05, 0xd4, 0x47, 0x09, 0xce, 0x49, 0x3e, 0x82,
	0x3d, 0xe5, 0x79, 0x11, 0x7a, 0x8a, 0xf0, 0x83, 0xef, 0x1a, 0xe2, 0x40, 0x3c, 0x6c, 0xf4, 0xf5,
	0xf4, 0x72, 0xbf, 0xf2, 0x5e, 0x8c, 0x6f, 0x14, 0x9e, 0xe3, 0xca, 0x2e, 0xb4, 0x36, 0x51, 0x3a,
	0x0f, 0xd1, 0xa8, 0x94, 0xc2, 0xcd, 0xc2, 0x7d, 0x7b, 0x1e, 0xa2, 0xbc, 0x0f, 0xbb, 0x98, 0x8d,
	0xc8, 0xba, 0x56, 0x4b, 0xc1, 0x1d, 0xd6, 0x1d, 0x57, 0x3e, 0x00, 0xc8, 0x23, 0xdc, 0xad, 0x56,
	0x0a, 0x35, 0xd8, 0xe1, 0x4e, 0x45, 0xcc, 0x55, 0xa4, 0x8c, 0xfa, 0x96, 0xd8, 0x50, 0x91, 0xb2,
	0x3e, 0xc1, 0xad, 0x97, 0x48, 0xce, 0xdc, 0xa7, 0xc1, 0xa9, 0x37, 0xc6, 0xaf, 0x0b, 0x8c, 0x49,
	0x76, 0xa0, 0x46, 0xfe, 0x0c, 0x79, 0xaf, 0x6a, 0x5e, 0x75, 0x20, 0xc6, 0xac, 0xc9, 0x7b, 0xa0,
	0xbb, 0x98, 0x64, 0x7c, 0xe5, 0x45, 0xea, 0x2e, 0x26, 0x8e, 0xcb, 0xa5, 0x19, 0x57, 0x19, 0x9e,
	0x35, 0xcb, 0x06, 0xf9, 0xff, 0xac, 0x38, 0x0c, 0xe6, 0x31, 0x4a, 0x03, 0xaa, 0xd3, 0x53, 0x8f,
	0x67, 0xed, 0x15, 0xb3, 0x32, 0xc9, 0xfa, 0x26, 0xe0, 0xe6, 0x44, 0x25, 0x98, 0x81, 0x5e, 0x2f,
	0x5a, 0xe6, 0xf1, 0x9d, 0x6a, 0x25, 0x0a, 0xd6, 0xac, 0x3e, 0xb4, 0x37, 0x14, 0x2b, 0x68, 0x1b,
	0xf4, 0x98, 0x14, 0x2d, 0x62, 0x06, 0x69, 0x1d, 0x36, 0xf3, 0x37, 0x62, 0x4f, 0x58, 0xec, 0xef,
	0xa4, 0x97, 0xfb, 0xd5, 0xef, 0x42, 0x8c, 0x57, 0xa9, 0xc7, 0x4f, 0x40, 0xcf, 0x2d, 0xd9, 0x84,
	0xc6, 0xbb, 0xe3, 0xe1, 0xe8, 0xc8, 0x39, 0x1e, 0x0d, 0xdb, 0x9a, 0xd4, 0xa1, 0xf2, 0xe6, 0x55,
	0x5b, 0x48, 0x00, 0xfd, 0xe8, 0x85, 0xf3, 0x7a, 0x34, 0x6c, 0x57, 0x0e, 0x7f, 0x0a, 0x68, 0x0e,
	0xf8, 0xe9, 0x4e, 0x30, 0x4a, 0xfc, 0x29, 0xca, 0x01, 0xc0, 0xe6, 0x72, 0xd2, 0x58, 0x0d, 0xbb,
	0xf2, 0xe1, 0x3a, 0x77, 0xb7, 0x38, 0x39, 0xb1, 0xa5, 0xc9, 0xe7, 0xb0, 0xbb, 0xde, 0x43, 0xde,
	0x5e, 0xf3, 0x96, 0xcf, 0xdb, 0xb9, 0x73, 0x45, 0x5f, 0x97, 0xf7, 0x8d, 0x5f, 0xa9, 0x29, 0x2e,
	0x52, 0x53, 0xfc, 0x4d, 0x4d, 0xf1, 0x63, 0x69, 0x6a, 0x17, 0x4b, 0x53, 0xfb, 0xb3, 0x34, 0xb5,
	0x13, 0x9d, 0x6b, 0x9e, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x31, 0xe1, 0x26, 0x70, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CenterServiceClient is the client API for CenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CenterServiceClient interface {
	GetInitCfg(ctx context.Context, in *GetInitCfgRequest, opts ...grpc.CallOption) (*GetInitCfgResponse, error)
	SaveData(ctx context.Context, in *SaveDataRequest, opts ...grpc.CallOption) (*SaveDataResponse, error)
}

type centerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCenterServiceClient(cc *grpc.ClientConn) CenterServiceClient {
	return &centerServiceClient{cc}
}

func (c *centerServiceClient) GetInitCfg(ctx context.Context, in *GetInitCfgRequest, opts ...grpc.CallOption) (*GetInitCfgResponse, error) {
	out := new(GetInitCfgResponse)
	err := c.cc.Invoke(ctx, "/proto.CenterService/GetInitCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerServiceClient) SaveData(ctx context.Context, in *SaveDataRequest, opts ...grpc.CallOption) (*SaveDataResponse, error) {
	out := new(SaveDataResponse)
	err := c.cc.Invoke(ctx, "/proto.CenterService/SaveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterServiceServer is the server API for CenterService service.
type CenterServiceServer interface {
	GetInitCfg(context.Context, *GetInitCfgRequest) (*GetInitCfgResponse, error)
	SaveData(context.Context, *SaveDataRequest) (*SaveDataResponse, error)
}

// UnimplementedCenterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCenterServiceServer struct {
}

func (*UnimplementedCenterServiceServer) GetInitCfg(ctx context.Context, req *GetInitCfgRequest) (*GetInitCfgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInitCfg not implemented")
}
func (*UnimplementedCenterServiceServer) SaveData(ctx context.Context, req *SaveDataRequest) (*SaveDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveData not implemented")
}

func RegisterCenterServiceServer(s *grpc.Server, srv CenterServiceServer) {
	s.RegisterService(&_CenterService_serviceDesc, srv)
}

func _CenterService_GetInitCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInitCfgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServiceServer).GetInitCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CenterService/GetInitCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServiceServer).GetInitCfg(ctx, req.(*GetInitCfgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterService_SaveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServiceServer).SaveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CenterService/SaveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServiceServer).SaveData(ctx, req.(*SaveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CenterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CenterService",
	HandlerType: (*CenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInitCfg",
			Handler:    _CenterService_GetInitCfg_Handler,
		},
		{
			MethodName: "SaveData",
			Handler:    _CenterService_SaveData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "centerms.proto",
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventData) > 0 {
		i -= len(m.EventData)
		copy(dAtA[i:], m.EventData)
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.EventData)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EventType) > 0 {
		i -= len(m.EventType)
		copy(dAtA[i:], m.EventType)
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.EventType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EventId) > 0 {
		i -= len(m.EventId)
		copy(dAtA[i:], m.EventId)
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.EventId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AggregateType) > 0 {
		i -= len(m.AggregateType)
		copy(dAtA[i:], m.AggregateType)
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.AggregateType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AggregateId) > 0 {
		i -= len(m.AggregateId)
		copy(dAtA[i:], m.AggregateId)
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.AggregateId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetInitCfgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInitCfgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInitCfgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DevId) > 0 {
		i -= len(m.DevId)
		copy(dAtA[i:], m.DevId)
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.DevId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Time != 0 {
		i = encodeVarintCenterms(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetInitCfgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInitCfgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInitCfgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cfg) > 0 {
		i -= len(m.Cfg)
		copy(dAtA[i:], m.Cfg)
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.Cfg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DevId) > 0 {
		i -= len(m.DevId)
		copy(dAtA[i:], m.DevId)
		i = encodeVarintCenterms(dAtA, i, uint64(len(m.DevId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Time != 0 {
		i = encodeVarintCenterms(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaveDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintCenterms(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCenterms(dAtA []byte, offset int, v uint64) int {
	offset -= sovCenterms(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AggregateId)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.AggregateType)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.EventData)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	return n
}

func (m *GetInitCfgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovCenterms(uint64(m.Time))
	}
	l = len(m.DevId)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	return n
}

func (m *GetInitCfgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cfg)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	return n
}

func (m *SaveDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovCenterms(uint64(m.Time))
	}
	l = len(m.DevId)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCenterms(uint64(l))
	}
	return n
}

func (m *SaveDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCenterms(uint64(m.Status))
	}
	return n
}

func sovCenterms(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCenterms(x uint64) (n int) {
	return sovCenterms(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenterms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenterms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenterms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenterms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenterms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenterms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenterms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInitCfgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenterms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInitCfgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInitCfgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenterms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenterms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenterms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInitCfgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenterms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInitCfgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInitCfgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cfg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCenterms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cfg = append(m.Cfg[:0], dAtA[iNdEx:postIndex]...)
			if m.Cfg == nil {
				m.Cfg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenterms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenterms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenterms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenterms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCenterms
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCenterms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenterms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenterms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenterms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCenterms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCenterms(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCenterms
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCenterms
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCenterms
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCenterms
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCenterms
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCenterms        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCenterms          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCenterms = fmt.Errorf("proto: unexpected end of group")
)
