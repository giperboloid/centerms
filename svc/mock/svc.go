// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kostiamol/centerms/svc (interfaces: CfgStorer,DataStorer,Subscriber)

// Package mock_svc is a generated GoMock package.
package mock_svc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	svc "github.com/kostiamol/centerms/svc"
)

// MockCfgStorer is a mock of CfgStorer interface
type MockCfgStorer struct {
	ctrl     *gomock.Controller
	recorder *MockCfgStorerMockRecorder
}

// MockCfgStorerMockRecorder is the mock recorder for MockCfgStorer
type MockCfgStorerMockRecorder struct {
	mock *MockCfgStorer
}

// NewMockCfgStorer creates a new mock instance
func NewMockCfgStorer(ctrl *gomock.Controller) *MockCfgStorer {
	mock := &MockCfgStorer{ctrl: ctrl}
	mock.recorder = &MockCfgStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfgStorer) EXPECT() *MockCfgStorerMockRecorder {
	return m.recorder
}

// DevIsRegistered mocks base method
func (m *MockCfgStorer) DevIsRegistered(arg0 *svc.DevMeta) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DevIsRegistered", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DevIsRegistered indicates an expected call of DevIsRegistered
func (mr *MockCfgStorerMockRecorder) DevIsRegistered(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DevIsRegistered", reflect.TypeOf((*MockCfgStorer)(nil).DevIsRegistered), arg0)
}

// GetDevCfg mocks base method
func (m *MockCfgStorer) GetDevCfg(arg0 string) (*svc.DevCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevCfg", arg0)
	ret0, _ := ret[0].(*svc.DevCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevCfg indicates an expected call of GetDevCfg
func (mr *MockCfgStorerMockRecorder) GetDevCfg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevCfg", reflect.TypeOf((*MockCfgStorer)(nil).GetDevCfg), arg0)
}

// GetDevDefaultCfg mocks base method
func (m *MockCfgStorer) GetDevDefaultCfg(arg0 *svc.DevMeta) (*svc.DevCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevDefaultCfg", arg0)
	ret0, _ := ret[0].(*svc.DevCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevDefaultCfg indicates an expected call of GetDevDefaultCfg
func (mr *MockCfgStorerMockRecorder) GetDevDefaultCfg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevDefaultCfg", reflect.TypeOf((*MockCfgStorer)(nil).GetDevDefaultCfg), arg0)
}

// Publish mocks base method
func (m *MockCfgStorer) Publish(arg0 interface{}, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish
func (mr *MockCfgStorerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockCfgStorer)(nil).Publish), arg0, arg1)
}

// SetDevCfg mocks base method
func (m *MockCfgStorer) SetDevCfg(arg0 string, arg1 *svc.DevCfg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDevCfg", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDevCfg indicates an expected call of SetDevCfg
func (mr *MockCfgStorerMockRecorder) SetDevCfg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDevCfg", reflect.TypeOf((*MockCfgStorer)(nil).SetDevCfg), arg0, arg1)
}

// SetDevMeta mocks base method
func (m *MockCfgStorer) SetDevMeta(arg0 *svc.DevMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDevMeta", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDevMeta indicates an expected call of SetDevMeta
func (mr *MockCfgStorerMockRecorder) SetDevMeta(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDevMeta", reflect.TypeOf((*MockCfgStorer)(nil).SetDevMeta), arg0)
}

// Subscribe mocks base method
func (m *MockCfgStorer) Subscribe(arg0 chan []byte, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockCfgStorerMockRecorder) Subscribe(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCfgStorer)(nil).Subscribe), varargs...)
}

// MockDataStorer is a mock of DataStorer interface
type MockDataStorer struct {
	ctrl     *gomock.Controller
	recorder *MockDataStorerMockRecorder
}

// MockDataStorerMockRecorder is the mock recorder for MockDataStorer
type MockDataStorerMockRecorder struct {
	mock *MockDataStorer
}

// NewMockDataStorer creates a new mock instance
func NewMockDataStorer(ctrl *gomock.Controller) *MockDataStorer {
	mock := &MockDataStorer{ctrl: ctrl}
	mock.recorder = &MockDataStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStorer) EXPECT() *MockDataStorerMockRecorder {
	return m.recorder
}

// GetDevData mocks base method
func (m *MockDataStorer) GetDevData(arg0 string) (*svc.DevData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevData", arg0)
	ret0, _ := ret[0].(*svc.DevData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevData indicates an expected call of GetDevData
func (mr *MockDataStorerMockRecorder) GetDevData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevData", reflect.TypeOf((*MockDataStorer)(nil).GetDevData), arg0)
}

// GetDevsData mocks base method
func (m *MockDataStorer) GetDevsData() ([]svc.DevData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevsData")
	ret0, _ := ret[0].([]svc.DevData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevsData indicates an expected call of GetDevsData
func (mr *MockDataStorerMockRecorder) GetDevsData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevsData", reflect.TypeOf((*MockDataStorer)(nil).GetDevsData))
}

// Publish mocks base method
func (m *MockDataStorer) Publish(arg0 interface{}, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish
func (mr *MockDataStorerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockDataStorer)(nil).Publish), arg0, arg1)
}

// SaveDevData mocks base method
func (m *MockDataStorer) SaveDevData(arg0 *svc.DevData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDevData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDevData indicates an expected call of SaveDevData
func (mr *MockDataStorerMockRecorder) SaveDevData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDevData", reflect.TypeOf((*MockDataStorer)(nil).SaveDevData), arg0)
}

// MockCfgSubscriber is a mock of Subscriber interface
type MockCfgSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockCfgSubscriberMockRecorder
}

// MockCfgSubscriberMockRecorder is the mock recorder for MockCfgSubscriber
type MockCfgSubscriberMockRecorder struct {
	mock *MockCfgSubscriber
}

// NewMockCfgSubscriber creates a new mock instance
func NewMockCfgSubscriber(ctrl *gomock.Controller) *MockCfgSubscriber {
	mock := &MockCfgSubscriber{ctrl: ctrl}
	mock.recorder = &MockCfgSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfgSubscriber) EXPECT() *MockCfgSubscriberMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockCfgSubscriber) Subscribe(arg0 chan []byte, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockCfgSubscriberMockRecorder) Subscribe(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCfgSubscriber)(nil).Subscribe), varargs...)
}
