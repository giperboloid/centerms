// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kostiamol/centerms/svc (interfaces: CfgStorer,DataStorer,Publisher)

// Package mock_svc is a generated GoMock package.
package mock_svc

import (
	gomock "github.com/golang/mock/gomock"
	dev "github.com/kostiamol/centerms/store/dev"
	reflect "reflect"
)

// MockCfgStorer is a mock of CfgStorer interface
type MockCfgStorer struct {
	ctrl     *gomock.Controller
	recorder *MockCfgStorerMockRecorder
}

// MockCfgStorerMockRecorder is the mock recorder for MockCfgStorer
type MockCfgStorerMockRecorder struct {
	mock *MockCfgStorer
}

// NewMockCfgStorer creates a new mock instance
func NewMockCfgStorer(ctrl *gomock.Controller) *MockCfgStorer {
	mock := &MockCfgStorer{ctrl: ctrl}
	mock.recorder = &MockCfgStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfgStorer) EXPECT() *MockCfgStorerMockRecorder {
	return m.recorder
}

// DevIsRegistered mocks base method
func (m *MockCfgStorer) DevIsRegistered(arg0 *dev.Meta) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DevIsRegistered", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DevIsRegistered indicates an expected call of DevIsRegistered
func (mr *MockCfgStorerMockRecorder) DevIsRegistered(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DevIsRegistered", reflect.TypeOf((*MockCfgStorer)(nil).DevIsRegistered), arg0)
}

// GetDevCfg mocks base method
func (m *MockCfgStorer) GetDevCfg(arg0 string) (*dev.Cfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevCfg", arg0)
	ret0, _ := ret[0].(*dev.Cfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevCfg indicates an expected call of GetDevCfg
func (mr *MockCfgStorerMockRecorder) GetDevCfg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevCfg", reflect.TypeOf((*MockCfgStorer)(nil).GetDevCfg), arg0)
}

// GetDevDefaultCfg mocks base method
func (m *MockCfgStorer) GetDevDefaultCfg(arg0 *dev.Meta) (*dev.Cfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevDefaultCfg", arg0)
	ret0, _ := ret[0].(*dev.Cfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevDefaultCfg indicates an expected call of GetDevDefaultCfg
func (mr *MockCfgStorerMockRecorder) GetDevDefaultCfg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevDefaultCfg", reflect.TypeOf((*MockCfgStorer)(nil).GetDevDefaultCfg), arg0)
}

// SetDevCfg mocks base method
func (m *MockCfgStorer) SetDevCfg(arg0 string, arg1 *dev.Cfg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDevCfg", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDevCfg indicates an expected call of SetDevCfg
func (mr *MockCfgStorerMockRecorder) SetDevCfg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDevCfg", reflect.TypeOf((*MockCfgStorer)(nil).SetDevCfg), arg0, arg1)
}

// SetDevMeta mocks base method
func (m *MockCfgStorer) SetDevMeta(arg0 *dev.Meta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDevMeta", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDevMeta indicates an expected call of SetDevMeta
func (mr *MockCfgStorerMockRecorder) SetDevMeta(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDevMeta", reflect.TypeOf((*MockCfgStorer)(nil).SetDevMeta), arg0)
}

// MockDataStorer is a mock of DataStorer interface
type MockDataStorer struct {
	ctrl     *gomock.Controller
	recorder *MockDataStorerMockRecorder
}

// MockDataStorerMockRecorder is the mock recorder for MockDataStorer
type MockDataStorerMockRecorder struct {
	mock *MockDataStorer
}

// NewMockDataStorer creates a new mock instance
func NewMockDataStorer(ctrl *gomock.Controller) *MockDataStorer {
	mock := &MockDataStorer{ctrl: ctrl}
	mock.recorder = &MockDataStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStorer) EXPECT() *MockDataStorerMockRecorder {
	return m.recorder
}

// GetDevData mocks base method
func (m *MockDataStorer) GetDevData(arg0 string) (*dev.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevData", arg0)
	ret0, _ := ret[0].(*dev.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevData indicates an expected call of GetDevData
func (mr *MockDataStorerMockRecorder) GetDevData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevData", reflect.TypeOf((*MockDataStorer)(nil).GetDevData), arg0)
}

// GetDevsData mocks base method
func (m *MockDataStorer) GetDevsData() ([]dev.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevsData")
	ret0, _ := ret[0].([]dev.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevsData indicates an expected call of GetDevsData
func (mr *MockDataStorerMockRecorder) GetDevsData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevsData", reflect.TypeOf((*MockDataStorer)(nil).GetDevsData))
}

// SaveDevData mocks base method
func (m *MockDataStorer) SaveDevData(arg0 *dev.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDevData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDevData indicates an expected call of SaveDevData
func (mr *MockDataStorerMockRecorder) SaveDevData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDevData", reflect.TypeOf((*MockDataStorer)(nil).SaveDevData), arg0)
}

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockPublisher) Publish(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockPublisherMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisher)(nil).Publish), arg0, arg1)
}
