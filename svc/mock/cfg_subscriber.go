// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kostiamol/centerms/svc (interfaces: CfgSubscriber)

// Package mock_svc is a generated GoMock package.
package mock_svc

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCfgSubscriber is a mock of CfgSubscriber interface
type MockCfgSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockCfgSubscriberMockRecorder
}

// MockCfgSubscriberMockRecorder is the mock recorder for MockCfgSubscriber
type MockCfgSubscriberMockRecorder struct {
	mock *MockCfgSubscriber
}

// NewMockCfgSubscriber creates a new mock instance
func NewMockCfgSubscriber(ctrl *gomock.Controller) *MockCfgSubscriber {
	mock := &MockCfgSubscriber{ctrl: ctrl}
	mock.recorder = &MockCfgSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfgSubscriber) EXPECT() *MockCfgSubscriberMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockCfgSubscriber) Subscribe(arg0 chan []byte, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockCfgSubscriberMockRecorder) Subscribe(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCfgSubscriber)(nil).Subscribe), varargs...)
}
